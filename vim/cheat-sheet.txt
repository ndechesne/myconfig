This cheat sheet contains tips that are generic to a default install of
Vim, but also includes items which are specific to my vimrc configuration.

the default <leader> is \
stuff in angle brackets is to be replaced (including the angle brackets)

General
	:%s/\s\+$//	trim whitespace at end of lines
	:retab		set tabs how you want them, highlight, then
			issue this command to change the tabs
	=		to re-indent, select area then issue command
	g{motion}	by default motion keys move up/down a line at
			a time (regardless of wrap), if you want to
			move up/down one visual line at a time prefix
			the motion with 'g'

Commandline Window
	q/		open cmdline window with search history
	q:		open cmdline window with command history
	Ctrl-f		switch from cmdline to cmdline window

Block Selection
	Ctrl-V		to select a block of of text, instead of just
			character-by-character or line-by-line

		once selected, use the following to

	c		change (delete and switch to insert mode)
	I		insert in front of cursor
	A		append after cursor
	r		replace every character in selection
	d		delete selection
	o		toggle cursor to opposite selection corner

Macros
	q<reg>		to start a macro hit 'q' then the register key,
			the register can be any letter a-z
	q		end the macro
	@<reg>		to replay the macro (can be prefixed with a count)

Spell Checking
	<leader>s	toggle spell check mode
	]s		move to next misspelled word
	[s		move to previous misspelled word
	z=		bring up list of suggestions for misspelled word
			under the cursor
	zg		add word to dictionary ('g'ood word)
	zw		mark word as bad

ctags
	Ctrl-]		follow a tag
	Ctrl-W ]	follow a tag into another buffer
	Ctrl-T		pop an entry off the 'follow' stack
	g]		show list of matches
	Ctrl-W g]	show list, open selected item in new window
	Ctrl-N		type part of an identifier, hit Ctrl-N (without having
			to switch to cmd mode) and vim offers a list of possible
			completions (:help complete-functions)

The Opposite of ctags
	Ctags are great if you are on a function and want to see its definition.
	But what if you want to see all places where a given function is called?
	A -> use vim's internal grep utility: vimgrep
	e.g.
	
	:vim /search/j **/*

	places the results in a 'quickfix' window
	to open this window:
	
	:copen
	
	while in this window use regular motion commands, hit enter on a line
	and be taken to that occurrence in a new buffer

Text Formatting
	start using 'Par' more often, is it ever handy!
	- set 'formatprg' to some external command (e.g. :set formatprg=Par)
	- highlight the line you want to affect (V/Ctrl-V + {motion})
	- hit 'gq' and the highlighted text is sent to the formatprg
	  and its output replaces the highlighted section
	NOTE: on openSuSE there already is a completely unrelated program
	      called 'par', openSuSE doesn't provide this 'Par', it can be found
	      https://build.opensuse.org/package/binary?arch=x86_64&filename=Par-1.52-8.4    5.x86_64.rpm&package=Par&project=home%3Aaljex&repository=openSUSE_Factory
	      and is called 'Par'
